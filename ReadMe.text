프레임워크 : 프레임워크가 내가작성한 코드를 제어하고 대신실행하면 그것은 프레임워크가 맞다 (JUnit)
라이브러리 : 내가작성한 코드가 직접 제어의 흐름을 담당한다면 그것은 라이브러리다 (내가직접호출하거나 실행)


IoC, DI
- 제어의역전(IoC Inversion of Control)
    - 기존프로그램은 클라이언트 구현 객체가 스스로 필요한 서버 구현객체를 생성하고 연결하고 실행했다 한마디로 구현객체가 프로그램의 제어 흐름을 스스로 조종했다 개발자 입장에서는 자연스러운흐름이다.
    - 반면에 AppConfig가 등장한 이후 구현객체는 자신의 로직을 시행하는 역할만 담당한다 프로그램의 제어흐름은 이제 AppConfig 가 가져간다 예를들어 'OrderServiceImpl' 은 필요한 인터페이스를 호출하지만
      어떤 구현객체들이 실행될지모른다
    - 프로그램에 대한 제어흐름의 권한은 모두 AppConfig 가 가지고있다 심지어 'OrderServiceImpl' 도 AppConfig 가 생성한다 그리고 AppConfig는 'OrderServiceImpl' 아닌 OrderService 의 인터페이스의
      다른 구현객체를 생성하고 실행할수도있다
    - 이렇듯 프로그램의 제어흐름을 직접 제어하는것이 아니라 외부에서 관리하는것을 제어의역전(IoC) 라고한다

- 의존관계주입(DI Dependency Injection)
    - 'OrderServiceImpl' 은 'DiscountPolicy' 인터페이스에 의존한다. 실제어떤 구현객체가 사용될지모른다.
    - 의존관계는 '정적인 클래스 의존관계와, 실행시점에 결정되는 동적인 객체(인스턴스) 의존관계' 둘을 분리해서 생각해야한다.
        -- 정적인 클래스 의존관계는 import 코드만보고도 알수있다

        -- 동적인 의존관계는 애플리케이션 실행시점에 실제 생성된 객체 인스턴스의 참조가 연결된것

IoC 컨테이너 DI 컨테이너

    - AppConfig 처럼 객체를 생성하고 관리하면서 의존관계를 연결해주는것을 IoC 컨테이너 또는 DI 컨테이너라고한다
    - 의존관계 주입에 초점을 맞추어 최근에는 주로 DI컨테이너라고한다
    - 또는 어셈블러, 오브젝트 팩토리 등으로 불리기도한다.


BeanFactory
    - 스프링 컨테이너에 최상위 인터페이스다.
    - 스프링 빈을 관리하고 조회하는 역할을 담당한다.
    - getBean() 을 제공한다.
    - 지금까지 우리가 사용했던 대부분의 기능은 BeanFactory 가 제공하는 기능이다.

ApplicationContext
    - BeanFactory 기능을 모두 상속받아서 제공한다.
    - 빈을 관리하고 검색하는 기능을 BeanFactory 가 제공해주는데 그러면 둘의차이는뭘까?
    - 애플리케이션을 개발할때 빈은관리하고 조회하는 기능은 물론이고 수많은 부가기능이 필요하다.

    -EnvironmentCapable, ListableBeanFactory, HierarchicalBeanFactory,
     MessageSource, ApplicationEventPublisher, ResourcePatternResolver

    - 메시지소스를 활용한 국제화 기능
        - 한곡에서는 한국어, 영어권에서는 영어로 출력
    - 환경변수
        - 로컬, 개발, 운영등을 구분해서 처리
    - 애플리케이션 이벤트
        - 이벤트를 발행하고 구독하는 모델을 편리하게 지원
    - 편리한 리소스 조회
        - 파일, 클래스패스, 외부 등에서 리소스를 편리하게 조회

    - 정리
        -- ApplicationContext 는 BeanFactory 의 기능을 상속받는다
        -- ApplicationContext 는 빈관리기능 + 편리한 부가기능을 제공한다.
        -- BeanFactory 를 직접사용할일은 거의없다 부가기능이 포함된 ApplicationContext 을 사용한다.
        -- BeanFactory 나 ApplicationContext 를 스프링 컨테이너라고 한다.

스프링 빈 설정 메타정보 - BeanDefinition
    - 스프링은 어떻게 이렇게 다양한 설정 형식을 지원하는 것일까? 그 중심에는 BeanDefinition 이라는 추상화가 있다.
    - 쉽게 이야기해서 역할과 구현을 개념적으로 나눈것 이다.
        - XML 을 읽어서 BeanDefinition 을 만들면 된다.
        - 자바 코드를 읽어서 BeanDefinition 을 만들면 된다.
        - 스프링 컨테이너는 자바 코드인지 XML 인지 몰라도 오직 BeanDefinition 만알면된다.
    - BeanDefinition 을 빈 설정 메타정보라고한다.
        - @Bean , <bean> 당 각각 하나씩 메타정보가 생선된다.
    - 스프링 컨테이너는 메타정보를 기반으로 스프링 빈을 설정한다.

    - AnnotationConfigApplicationContext 는 AnnotatedBeanDefinitionReader 를 사용해서
      AppConfig.class 를 읽고 BeanDefinition 을 생성한다.

    - GenericXmlApplicationContext 는 XmlBeanDefinitionReader 를 사용해서
      appConfig.xml 설정정보를 읽고 BeanDefinition 을 생성한다.

    - 새로운 형식의 설정정보가 추가되면 XxxBeanDefinitionReader 를 만들어서 BeanDefinition 을 생성하면된다.

 /**    BeanDefinitionTest << 에 정리또해놈   */


싱글톤 패턴
    - 클래스의 인스턴스가 딱 1개만 생성되는 것을 보장하는 디자인패턴.
    - 그래서 객체 인스턴스를 2개 이상 생성하지 못하도록 막아야한다.
        -- private 생성자를 사용해서 외부에서 임의로 new 키워드를 사용하지 못하도록 막아야한다.


## 싱글톤 패턴을 적용하면 고객의 요청이 올때마다 객체를 생성하는것이 아니라, 이미 만들어진 객체를 공유해서 효율적으로 사용 할수있다.
   하지만 싱글톤 패턴은 다음과 같은 수많은 문제점들을 가지고있다.

   - 싱글톤 패턴 문제점
    -- 싱글톤 패턴을 구현하는 코드 자체가 많이 들어간다.
    -- 의존관계상 클라이언트가 구체 클래스에 의존한다. -> DIP를 위반한다
    -- 클라이언트가 구체 클래스에 의존해서 OCP 원칙을 위반할 가능성이 높다
    -- 테스트 하기가 어렵다
    -- 내부속성을 변경하거나 초기화 하기 어렵다.
    -- private 생성자로 자식 클래스를 만들기 어렵다.
    -- 결론적으로 유연성이 떨어진다
    -- 안티패턴으로 불리기도한다.