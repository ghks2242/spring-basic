프레임워크 : 프레임워크가 내가작성한 코드를 제어하고 대신실행하면 그것은 프레임워크가 맞다 (JUnit)
라이브러리 : 내가작성한 코드가 직접 제어의 흐름을 담당한다면 그것은 라이브러리다 (내가직접호출하거나 실행)


IoC, DI
- 제어의역전(IoC Inversion of Control)
    - 기존프로그램은 클라이언트 구현 객체가 스스로 필요한 서버 구현객체를 생성하고 연결하고 실행했다 한마디로 구현객체가 프로그램의 제어 흐름을 스스로 조종했다 개발자 입장에서는 자연스러운흐름이다.
    - 반면에 AppConfig가 등장한 이후 구현객체는 자신의 로직을 시행하는 역할만 담당한다 프로그램의 제어흐름은 이제 AppConfig 가 가져간다 예를들어 'OrderServiceImpl' 은 필요한 인터페이스를 호출하지만
      어떤 구현객체들이 실행될지모른다
    - 프로그램에 대한 제어흐름의 권한은 모두 AppConfig 가 가지고있다 심지어 'OrderServiceImpl' 도 AppConfig 가 생성한다 그리고 AppConfig는 'OrderServiceImpl' 아닌 OrderService 의 인터페이스의
      다른 구현객체를 생성하고 실행할수도있다
    - 이렇듯 프로그램의 제어흐름을 직접 제어하는것이 아니라 외부에서 관리하는것을 제어의역전(IoC) 라고한다

- 의존관계주입(DI Dependency Injection)
    - 'OrderServiceImpl' 은 'DiscountPolicy' 인터페이스에 의존한다. 실제어떤 구현객체가 사용될지모른다.
    - 의존관계는 '정적인 클래스 의존관계와, 실행시점에 결정되는 동적인 객체(인스턴스) 의존관계' 둘을 분리해서 생각해야한다.
        -- 정적인 클래스 의존관계는 import 코드만보고도 알수있다

        -- 동적인 의존관계는 애플리케이션 실행시점에 실제 생성된 객체 인스턴스의 참조가 연결된것

IoC 컨테이너 DI 컨테이너

    - AppConfig 처럼 객체를 생성하고 관리하면서 의존관계를 연결해주는것을 IoC 컨테이너 또는 DI 컨테이너라고한다
    - 의존관계 주입에 초점을 맞추어 최근에는 주로 DI컨테이너라고한다
    - 또는 어셈블러, 오브젝트 팩토리 등으로 불리기도한다.